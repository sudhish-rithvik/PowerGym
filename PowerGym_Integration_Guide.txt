
POWERGYM HARDWARE-SOFTWARE INTEGRATION GUIDE
============================================

This guide shows how to connect the ESP32 hardware system with the web dashboard
for real-time gym equipment monitoring and energy generation tracking.

SYSTEM ARCHITECTURE:
===================

[Gym Equipment] → [Sensors] → [ESP32] → [WiFi] → [Web Dashboard]
      ↓              ↓          ↓         ↓           ↓
  - Treadmill    - Speed      - Data    - HTTP    - Real-time UI
  - Bike         - Weight     - Power   - JSON    - Charts
  - Elliptical   - Current    - WiFi    - REST    - Rewards
  - Rowing       - Voltage    - Server  - API     - Analytics

HARDWARE SETUP:
===============

1. PREPARE ESP32 SYSTEM:
   - Upload PowerGym_Hardware_Integration.ino to ESP32
   - Connect sensors according to PowerGym_Wiring_Guide.txt
   - Install generators on gym equipment
   - Power on system and verify LED indicators

2. NETWORK CONFIGURATION:
   - ESP32 creates WiFi hotspot "PowerGym_Network" (password: GymEnergy2025)
   - OR connect ESP32 to existing WiFi (modify code with your credentials)
   - Note ESP32 IP address from Serial Monitor

3. SENSOR CALIBRATION:
   - Use multimeter to verify voltage/current readings
   - Place known weights on load cells for calibration
   - Test speed sensors with manual equipment operation
   - Adjust calibration constants in Arduino code

SOFTWARE INTEGRATION:
====================

1. WEB DASHBOARD FILES:
   - hardware_integrated_dashboard.html (Updated UI)
   - hardware_app.js (Hardware communication)
   - style.css (Updated with hardware styling)

2. COMMUNICATION PROTOCOL:
   ESP32 REST API Endpoints:
   - GET /api/status → System status and uptime
   - GET /api/dashboard → Complete fitness and energy data
   - GET /api/energy → Real-time power generation
   - GET /api/equipment → Individual equipment status

3. AUTO-DISCOVERY SYSTEM:
   - Dashboard automatically scans common IP ranges
   - Detects ESP32 by querying /api/status endpoint
   - Displays connection status in header
   - Handles connection failures and reconnection

REAL-TIME DATA FLOW:
===================

1. SENSOR DATA COLLECTION (ESP32):
   ```
   Speed Sensors → Interrupt counting → RPM calculation
   Load Cells → HX711 → Weight measurement
   Current/Voltage → ADC → Power calculation (P = V × I)
   Energy → Time integration → Wh accumulation
   ```

2. DATA TRANSMISSION:
   ```
   ESP32 → JSON formatting → HTTP response → Web dashboard
   Update Rate: 1 Hz (every second)
   Data Format: JSON with equipment arrays
   ```

3. DASHBOARD UPDATES:
   ```
   Fetch data → Update charts → Calculate rewards → Display metrics
   Real-time chart updates with power generation
   Live sensor readings display
   Automatic fitness calculations
   ```

API DATA STRUCTURE:
==================

Equipment Data Format:
```json
{
  "id": 0,
  "name": "Treadmill",
  "rpm": 45.2,
  "weight": 25.5,
  "voltage": 12.4,
  "current": 2.1,
  "power": 26.04,
  "energy": 125.3,
  "active": true,
  "last_update": 1691344800000
}
```

Dashboard Data Format:
```json
{
  "user_profile": {
    "name": "David Strong",
    "age": 28,
    "weight_kg": 75,
    "height_cm": 175
  },
  "daily_metrics": {
    "bmr": 1784,
    "tdee": 2765,
    "target_calories": 2265
  },
  "equipment_data": [...],
  "rewards": {
    "fitness_points": 1350,
    "energy_points": 1950,
    "total_points": 3300
  }
}
```

FEATURES INTEGRATION:
====================

1. REAL-TIME MONITORING:
   ✅ Live power generation display
   ✅ Equipment status indicators
   ✅ Sensor readings visualization
   ✅ Connection status monitoring

2. FITNESS CALCULATIONS:
   ✅ BMR calculation from user profile
   ✅ Real-time calorie burn estimation
   ✅ METs-based activity tracking
   ✅ Heart rate zone estimation from power

3. REWARDS SYSTEM:
   ✅ Fitness points (10 points/minute active)
   ✅ Energy points (5 points/Wh generated)
   ✅ Level progression (Bronze → Silver → Gold → Platinum)
   ✅ Achievement notifications

4. DATA MANAGEMENT:
   ✅ CSV export functionality
   ✅ Historical data charting
   ✅ Sensor calibration tools
   ✅ System reset capabilities

TROUBLESHOOTING:
===============

1. CONNECTION ISSUES:
   Problem: "ESP32 Not Found"
   Solution: 
   - Verify ESP32 is powered and WiFi is enabled
   - Check IP address in Arduino Serial Monitor
   - Ensure dashboard and ESP32 are on same network
   - Try manual IP entry in browser: http://[ESP32_IP]/api/status

2. SENSOR READINGS:
   Problem: Incorrect or zero readings
   Solution:
   - Check sensor wiring connections
   - Verify power supply voltages
   - Recalibrate sensors using dashboard
   - Test sensors individually with multimeter

3. POWER MEASUREMENT:
   Problem: Power readings don't match expected values
   Solution:
   - Verify current sensor orientation
   - Check voltage divider calibration
   - Ensure generators are properly connected
   - Test with known load resistor

4. DASHBOARD UPDATES:
   Problem: Data not updating in real-time
   Solution:
   - Check browser console for JavaScript errors
   - Verify API endpoints are responding
   - Clear browser cache and reload
   - Check network connectivity

DEPLOYMENT CHECKLIST:
====================

□ ESP32 firmware uploaded and tested
□ All sensors connected and calibrated
□ Generators installed on equipment
□ Power supplies connected and stable
□ WiFi network configured
□ Web dashboard files deployed
□ API endpoints tested
□ Real-time updates verified
□ Calibration completed
□ Safety systems tested
□ User training completed
□ Documentation provided

MAINTENANCE SCHEDULE:
====================

Daily:
- Check connection status
- Verify real-time updates
- Monitor sensor readings

Weekly:
- Clean sensor surfaces
- Check connection integrity
- Backup data exports

Monthly:
- Recalibrate load cells
- Update firmware if needed
- Review system performance
- Replace worn components

Quarterly:
- Full system calibration
- Security updates
- Performance optimization
- User feedback review

SUPPORT CONTACTS:
================

Hardware Issues: Check wiring guide and sensor specifications
Software Issues: Review JavaScript console and API responses
Calibration: Use built-in calibration tools in dashboard
Training: Refer to user manual and video tutorials

For technical support, check system logs and error messages
before contacting support team.
